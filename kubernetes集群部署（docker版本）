下面为在centos7系统下部署的文档（Ubuntu下面安装软件部分命令需要从yum换成apt install）

1.更新系统 安装一些常用软件
yum update -y & yum install git wget vim -y

***部署docker最新版本且替换为阿里云源
# step 1: 安装必要的一些系统工具
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
# Step 2: 添加软件源信息
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# Step 3: 更新并安装 Docker-CE
sudo yum makecache fast
sudo yum -y install docker-ce
# Step 4: 开启Docker服务
sudo service docker start

#安装docker后校验
docker version

#配置镜像加速器：
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://9w7g3j4y.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker


2.由于安装kubernetes组件时 很多组件都是打包成docker镜像的 而且这些镜像都在外网 所以这里可以替换docker安装源为国内源 执行下面的命令：
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

yum makecache fast

3.关闭防火墙
systemctl stop firewalld
systemctl disable firewalld

4.禁用swap内存
    4.1 swapoff -a
    4.2 修改/etc/fstab文件，注释掉SWAP的自动挂载，使用free -m确认swap已经关闭

5.关闭selinux
vim /etc/selinux/config
#设置SELINUX=disabled
然后依次执行下面的命令：
setenforce 0

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system


6.执行安装命令
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

7.初始化启动
执行初始化命令之前 请阅读下方的两点注意事项 请一定要阅读：
kubeadm init --pod-network-cidr=192.168.0.0/16

#特别注意1：--kubernetes-version=v1.12.2 参数是kubernetes的版本号 由于版本库里面的版本时刻在更新 因此这里如果v1.12.2版本找不到或者过时 
系统错误提示会告知当前最新的版本 只要把参数替换为最新版本即可

##特别注意2：执行上述指令后 kubeadm会去镜像仓库拉取必须的kubernetes组件镜像 由于镜像在国外 这一步很可能会出错（出错提示会告知所需要的镜像和版本） 
解决的办法是提前从国内镜像库中把它需要的组件的镜像提前下载到本地 还需要注意组件的镜像版本 例如我本次安装的kubernetes版本是v1.12.2 它所需要的组件及其版本如下所示：
k8s.gcr.io/kube-apiserver:v1.12.2
k8s.gcr.io/kube-controller-manager:v1.12.2
k8s.gcr.io/kube-scheduler:v1.12.2
k8s.gcr.io/kube-proxy:v1.12.2
k8s.gcr.io/pause:3.1
k8s.gcr.io/etcd:3.2.24
k8s.gcr.io/coredns:1.2.2
这里给大家推荐一个国内的dockerhub仓库 url：https://hub.docker.com/u/mirrorgooglecontainers/
这个账户下面的kubernetes组件镜像非常全面 可以先将对应版本镜像使用docker pull命令拉到自己本地后 再用docker tag命令 将镜像打标签改为kubeadm要求的镜像版本 
例如：
docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1.12.2
docker tag mirrorgooglecontainers/kube-apiserver-amd64:v1.12.2 k8s.gcr.io/kube-apiserver:v1.12.2
准备好上面提到的所有组件后：我们就可以开始执行上述的初始化命令了

初始化成功后还需要接着执行下面的命令：

export KUBECONFIG=/etc/kubernetes/admin.conf
echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> ~/.bash_profile

docker之间需要相互通信还需要部署一下容器之间互通的网络，执行下面的指令即可：
kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml

等待片刻 Kubernetes Master节点就部署好了。
成功后系统会返回如下状态信息：
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  /docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>

注意查看最后一条信息，如何将工作节点加入集群中，直接在工作节点执行最后系统返回的这条指令即可。注意k8s工作节点也要执行如上教程的1至7步操作，执行完成后，在执行添加节点指令即可。

可以使用命令查看集群状态：
kubectl get nodes
或者
kubectl get pods --all-namespaces



问题汇总与解决办法：
https://github.com/kubernetes/kubernetes/issues/44665
